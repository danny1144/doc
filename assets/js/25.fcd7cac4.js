(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{380:function(e,n,t){"use strict";t.r(n);var s=t(1),r=Object(s.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",{staticClass:"content"},[e._m(0),e._v(" "),e._m(1),e._m(2),e._v(" "),t("p",[e._v("在Java开发过程以及生产环境中，最常用的web应用服务器当属Tomcat，尽管这只猫也能够处理一些静态请求，例如图片、html、样式文件等，但是效率并不是那么尽人意。所以在生产环境中，我们一般使用Nginx代理服务器来处理静态文件，来提升网站性能。")]),e._v(" "),e._m(3),e._m(4),e._v(" "),t("p",[e._v("Nginx 提供轮询（round robin）、IP 哈希（client IP）和加权轮询 3 种方式，默认情况下，Nginx 采用的是轮询。")]),e._v(" "),e._m(5),e._v(" "),t("p",[e._v("每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。")]),e._v(" "),e._m(6),e._m(7),e._v(" "),t("p",[e._v("指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。")]),e._v(" "),e._m(8),e._m(9),e._v(" "),t("p",[e._v("每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。")]),e._v(" "),e._m(10),e._m(11),e._v(" "),t("p",[e._v("可以为每个 backserver 指定最大的重试次数，和重试时间间隔,所使用的关键字是 max_fails 和 fail_timeout。")]),e._v(" "),e._m(12),t("p",[e._v("失败重试次数为2，且超时时间为30秒。")]),e._v(" "),e._m(13),e._v(" "),e._m(14),t("p",[e._v("当所有的非备机（non-backup）都宕机（down）或者繁忙（busy）的时候，就会使用由 backup 标注的备机。必须要注意的是，backup 不能和 ip_hash 关键字一起使用。")]),e._v(" "),e._m(15),e._v(" "),t("p",[t("a",{attrs:{href:"https://blog.52itstyle.com/archives/736/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Nginx学习之反向代理WebSocket配置实例 "),t("OutboundLink")],1)])])}),[function(){var e=this.$createElement,n=this._self._c||e;return n("h2",{attrs:{id:"nginx"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#nginx"}},[this._v("#")]),this._v(" nginx")])},function(){var e=this.$createElement,n=this._self._c||e;return n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v('#运行用户\nuser nobody;\n#启动进程,通常设置成和cpu的数量相等\nworker_processes  1;\n\n#全局错误日志及PID文件\n#error_log  logs/error.log;\n#error_log  logs/error.log  notice;\n#error_log  logs/error.log  info;\n\n#pid        logs/nginx.pid;\n\n#工作模式及连接数上限\nevents {\n    #epoll是多路复用IO(I/O Multiplexing)中的一种方式,\n    #仅用于linux2.6以上内核,可以大大提高nginx的性能\n    use   epoll; \n\n    #单个后台worker process进程的最大并发链接数    \n    worker_connections  1024;\n\n    # 并发总数是 worker_processes 和 worker_connections 的乘积\n    # 即 max_clients = worker_processes * worker_connections\n    # 在设置了反向代理的情况下，max_clients = worker_processes * worker_connections / 4  为什么\n    # 为什么上面反向代理要除以4，应该说是一个经验值\n    # 根据以上条件，正常情况下的Nginx Server可以应付的最大连接数为：4 * 8000 = 32000\n    # worker_connections 值的设置跟物理内存大小有关\n    # 因为并发受IO约束，max_clients的值须小于系统可以打开的最大文件数\n    # 而系统可以打开的最大文件数和内存大小成正比，一般1GB内存的机器上可以打开的文件数大约是10万左右\n    # 我们来看看360M内存的VPS可以打开的文件句柄数是多少：\n    # $ cat /proc/sys/fs/file-max\n    # 输出 34336\n    # 32000 < 34336，即并发连接总数小于系统可以打开的文件句柄总数，这样就在操作系统可以承受的范围之内\n    # 所以，worker_connections 的值需根据 worker_processes 进程数目和系统可以打开的最大文件总数进行适当地进行设置\n    # 使得并发总数小于操作系统可以打开的最大文件数目\n    # 其实质也就是根据主机的物理CPU和内存进行配置\n    # 当然，理论上的并发总数可能会和实际有所偏差，因为主机还有其他的工作进程需要消耗系统资源。如前所述，  ulimit -a 用来显示当前的各种用户进程限制。  Linux对于每个用户，系统限制其最大进程数。为提高性能，可以根据设备资源情况，\n    # ulimit -SHn 65535\n\n}\n\n\nhttp {\n    #设定mime类型,类型由mime.type文件定义\n    include    mime.types;\n    default_type  application/octet-stream;\n    #设定日志格式\n    log_format  main  \'$remote_addr - $remote_user [$time_local] "$request" \'\n                      \'$status $body_bytes_sent "$http_referer" \'\n                      \'"$http_user_agent" "$http_x_forwarded_for"\';\n\n    access_log  logs/access.log  main;\n\n    #sendfile 指令指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件，\n    #对于普通应用，必须设为 on,\n    #如果用来进行下载等应用磁盘IO重负载应用，可设置为 off，\n    #以平衡磁盘与网络I/O处理速度，降低系统的uptime.\n    sendfile     on;\n    #tcp_nopush     on;\n\n    #连接超时时间\n    #keepalive_timeout  0;\n    keepalive_timeout  65;\n    tcp_nodelay     on;\n\n    #开启gzip压缩\n    gzip  on;\n    gzip_disable "MSIE [1-6].";\n\n    #设定请求缓冲\n    client_header_buffer_size    128k;\n    large_client_header_buffers  4 128k;\n\n\n    #设定虚拟主机配置\n    server {\n        #侦听80端口\n        listen    80;\n        #定义使用 www.nginx.cn访问\n        server_name  www.nginx.cn;\n\n        #定义服务器的默认网站根目录位置\n        root html;\n\n        #设定本虚拟主机的访问日志\n        access_log  logs/nginx.access.log  main;\n\n        #默认请求\n        location / {\n            \n            #定义首页索引文件的名称\n            index index.php index.html index.htm;   \n\n        }\n\n        # 定义错误提示页面\n        error_page   500 502 503 504 /50x.html;\n        location = /50x.html {\n        }\n\n        #静态文件，nginx自己处理\n        location ~ ^/(images|javascript|js|css|flash|media|static)/ {\n            \n            #过期30天，静态文件不怎么更新，过期可以设大一点，\n            #如果频繁更新，则可以设置得小一点。\n            expires 30d;\n        }\n\n        #PHP 脚本请求全部转发到 FastCGI处理. 使用FastCGI默认配置.\n        location ~ .php$ {\n            fastcgi_pass 127.0.0.1:9000;\n            fastcgi_index index.php;\n            fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;\n            include fastcgi_params;\n        }\n\n        #禁止访问 .htxxx 文件\n            location ~ /.ht {\n            deny all;\n        }\n\n    }\n}\n')])])])},function(){var e=this.$createElement,n=this._self._c||e;return n("h3",{attrs:{id:"静态文件服务器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#静态文件服务器"}},[this._v("#")]),this._v(" 静态文件服务器")])},function(){var e=this.$createElement,n=this._self._c||e;return n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v("server {\n        listen  80;\n        server_name  file.52itstyle.com;\n        charset utf-8;\n        #root 指令用来指定文件在服务器上的基路径\n        root /data/statics;\n        #location指令用来映射请求到本地文件系统\n        location / {\n           autoindex on; # 索引\n           autoindex_exact_size on; # 显示文件大小\n           autoindex_localtime on; # 显示文件时间\n        }\n   }\n")])])])},function(){var e=this.$createElement,n=this._self._c||e;return n("h3",{attrs:{id:"负载均衡"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#负载均衡"}},[this._v("#")]),this._v(" 负载均衡")])},function(){var e=this.$createElement,n=this._self._c||e;return n("h4",{attrs:{id:"轮询（默认）"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#轮询（默认）"}},[this._v("#")]),this._v(" 轮询（默认）")])},function(){var e=this.$createElement,n=this._self._c||e;return n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v("upstream backserver { \nserver 192.168.1.14; \nserver 192.168.1.15; \n} \n")])])])},function(){var e=this.$createElement,n=this._self._c||e;return n("h4",{attrs:{id:"加权轮询"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#加权轮询"}},[this._v("#")]),this._v(" 加权轮询")])},function(){var e=this.$createElement,n=this._self._c||e;return n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v("upstream backserver { \nserver 192.168.1.14 weight=1; \nserver 192.168.1.15 weight=2; \n} \n")])])])},function(){var e=this.$createElement,n=this._self._c||e;return n("h4",{attrs:{id:"ip-hash"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#ip-hash"}},[this._v("#")]),this._v(" ip_hash")])},function(){var e=this.$createElement,n=this._self._c||e;return n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v("upstream backserver { \nip_hash; \nserver 192.168.0.14; \nserver 192.168.0.15; \n} \n")])])])},function(){var e=this.$createElement,n=this._self._c||e;return n("h4",{attrs:{id:"重试策略"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#重试策略"}},[this._v("#")]),this._v(" 重试策略")])},function(){var e=this.$createElement,n=this._self._c||e;return n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v("upstream backserver { \nserver 192.168.1.14  weight=1  max_fails=2 fail_timeout=30s; \nserver 192.168.1.15  weight=2  max_fails=2 fail_timeout=30s;\n} \n")])])])},function(){var e=this.$createElement,n=this._self._c||e;return n("h4",{attrs:{id:"热机策略"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#热机策略"}},[this._v("#")]),this._v(" 热机策略")])},function(){var e=this.$createElement,n=this._self._c||e;return n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v("upstream backserver { \nserver 192.168.1.14  weight=1  max_fails=2 fail_timeout=30s; \nserver 192.168.1.15  weight=2  max_fails=2 fail_timeout=30s;\n\nserver 192.168.1.16 backup;\n}\n")])])])},function(){var e=this.$createElement,n=this._self._c||e;return n("h3",{attrs:{id:"websocket配置实例"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#websocket配置实例"}},[this._v("#")]),this._v(" WebSocket配置实例")])}],!1,null,null,null);n.default=r.exports}}]);